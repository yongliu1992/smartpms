// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yongliu1992/smartpms/app/property/service/internal/data/ent/community"
)

// Community is the model entity for the Community schema.
type Community struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ProvinceID holds the value of the "province_id" field.
	ProvinceID int `json:"province_id,omitempty"`
	// CityID holds the value of the "city_id" field.
	CityID int `json:"city_id,omitempty"`
	// AreaID holds the value of the "area_id" field.
	AreaID int `json:"area_id,omitempty"`
	// AreaNum holds the value of the "area_num" field.
	AreaNum int `json:"area_num,omitempty"`
	// AdminID holds the value of the "admin_id" field.
	AdminID int `json:"admin_id,omitempty"`
	// CommNumber holds the value of the "comm_number" field.
	CommNumber int `json:"comm_number,omitempty"`
	// State holds the value of the "state" field.
	State int `json:"state,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Community) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case community.FieldID, community.FieldProvinceID, community.FieldCityID, community.FieldAreaID, community.FieldAreaNum, community.FieldAdminID, community.FieldCommNumber, community.FieldState:
			values[i] = new(sql.NullInt64)
		case community.FieldName:
			values[i] = new(sql.NullString)
		case community.FieldStartTime, community.FieldEndTime, community.FieldCreatedAt, community.FieldUpdatedAt, community.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Community", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Community fields.
func (c *Community) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case community.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case community.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case community.FieldProvinceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field province_id", values[i])
			} else if value.Valid {
				c.ProvinceID = int(value.Int64)
			}
		case community.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				c.CityID = int(value.Int64)
			}
		case community.FieldAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field area_id", values[i])
			} else if value.Valid {
				c.AreaID = int(value.Int64)
			}
		case community.FieldAreaNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field area_num", values[i])
			} else if value.Valid {
				c.AreaNum = int(value.Int64)
			}
		case community.FieldAdminID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field admin_id", values[i])
			} else if value.Valid {
				c.AdminID = int(value.Int64)
			}
		case community.FieldCommNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comm_number", values[i])
			} else if value.Valid {
				c.CommNumber = int(value.Int64)
			}
		case community.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				c.State = int(value.Int64)
			}
		case community.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				c.StartTime = value.Time
			}
		case community.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				c.EndTime = value.Time
			}
		case community.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case community.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case community.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Community.
// Note that you need to call Community.Unwrap() before calling this method if this Community
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Community) Update() *CommunityUpdateOne {
	return (&CommunityClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Community entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Community) Unwrap() *Community {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Community is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Community) String() string {
	var builder strings.Builder
	builder.WriteString("Community(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", province_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ProvinceID))
	builder.WriteString(", city_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CityID))
	builder.WriteString(", area_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AreaID))
	builder.WriteString(", area_num=")
	builder.WriteString(fmt.Sprintf("%v", c.AreaNum))
	builder.WriteString(", admin_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AdminID))
	builder.WriteString(", comm_number=")
	builder.WriteString(fmt.Sprintf("%v", c.CommNumber))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", c.State))
	builder.WriteString(", start_time=")
	builder.WriteString(c.StartTime.Format(time.ANSIC))
	builder.WriteString(", end_time=")
	builder.WriteString(c.EndTime.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Communities is a parsable slice of Community.
type Communities []*Community

func (c Communities) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
