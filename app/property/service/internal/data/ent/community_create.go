// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yongliu1992/smartpms/app/property/service/internal/data/ent/community"
)

// CommunityCreate is the builder for creating a Community entity.
type CommunityCreate struct {
	config
	mutation *CommunityMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CommunityCreate) SetName(s string) *CommunityCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetProvinceID sets the "province_id" field.
func (cc *CommunityCreate) SetProvinceID(i int) *CommunityCreate {
	cc.mutation.SetProvinceID(i)
	return cc
}

// SetCityID sets the "city_id" field.
func (cc *CommunityCreate) SetCityID(i int) *CommunityCreate {
	cc.mutation.SetCityID(i)
	return cc
}

// SetAreaID sets the "area_id" field.
func (cc *CommunityCreate) SetAreaID(i int) *CommunityCreate {
	cc.mutation.SetAreaID(i)
	return cc
}

// SetAreaNum sets the "area_num" field.
func (cc *CommunityCreate) SetAreaNum(i int) *CommunityCreate {
	cc.mutation.SetAreaNum(i)
	return cc
}

// SetAdminID sets the "admin_id" field.
func (cc *CommunityCreate) SetAdminID(i int) *CommunityCreate {
	cc.mutation.SetAdminID(i)
	return cc
}

// SetCommNumber sets the "comm_number" field.
func (cc *CommunityCreate) SetCommNumber(i int) *CommunityCreate {
	cc.mutation.SetCommNumber(i)
	return cc
}

// SetState sets the "state" field.
func (cc *CommunityCreate) SetState(i int) *CommunityCreate {
	cc.mutation.SetState(i)
	return cc
}

// SetStartTime sets the "start_time" field.
func (cc *CommunityCreate) SetStartTime(t time.Time) *CommunityCreate {
	cc.mutation.SetStartTime(t)
	return cc
}

// SetEndTime sets the "end_time" field.
func (cc *CommunityCreate) SetEndTime(t time.Time) *CommunityCreate {
	cc.mutation.SetEndTime(t)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommunityCreate) SetCreatedAt(t time.Time) *CommunityCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommunityCreate) SetUpdatedAt(t time.Time) *CommunityCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CommunityCreate) SetDeletedAt(t time.Time) *CommunityCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetID sets the "id" field.
func (cc *CommunityCreate) SetID(i int) *CommunityCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the CommunityMutation object of the builder.
func (cc *CommunityCreate) Mutation() *CommunityMutation {
	return cc.mutation
}

// Save creates the Community in the database.
func (cc *CommunityCreate) Save(ctx context.Context) (*Community, error) {
	var (
		err  error
		node *Community
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommunityCreate) SaveX(ctx context.Context) *Community {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommunityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommunityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommunityCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Community.name"`)}
	}
	if _, ok := cc.mutation.ProvinceID(); !ok {
		return &ValidationError{Name: "province_id", err: errors.New(`ent: missing required field "Community.province_id"`)}
	}
	if _, ok := cc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Community.city_id"`)}
	}
	if _, ok := cc.mutation.AreaID(); !ok {
		return &ValidationError{Name: "area_id", err: errors.New(`ent: missing required field "Community.area_id"`)}
	}
	if _, ok := cc.mutation.AreaNum(); !ok {
		return &ValidationError{Name: "area_num", err: errors.New(`ent: missing required field "Community.area_num"`)}
	}
	if _, ok := cc.mutation.AdminID(); !ok {
		return &ValidationError{Name: "admin_id", err: errors.New(`ent: missing required field "Community.admin_id"`)}
	}
	if _, ok := cc.mutation.CommNumber(); !ok {
		return &ValidationError{Name: "comm_number", err: errors.New(`ent: missing required field "Community.comm_number"`)}
	}
	if _, ok := cc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Community.state"`)}
	}
	if _, ok := cc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Community.start_time"`)}
	}
	if _, ok := cc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Community.end_time"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Community.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Community.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Community.deleted_at"`)}
	}
	return nil
}

func (cc *CommunityCreate) sqlSave(ctx context.Context) (*Community, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (cc *CommunityCreate) createSpec() (*Community, *sqlgraph.CreateSpec) {
	var (
		_node = &Community{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: community.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: community.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.ProvinceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldProvinceID,
		})
		_node.ProvinceID = value
	}
	if value, ok := cc.mutation.CityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCityID,
		})
		_node.CityID = value
	}
	if value, ok := cc.mutation.AreaID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaID,
		})
		_node.AreaID = value
	}
	if value, ok := cc.mutation.AreaNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaNum,
		})
		_node.AreaNum = value
	}
	if value, ok := cc.mutation.AdminID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAdminID,
		})
		_node.AdminID = value
	}
	if value, ok := cc.mutation.CommNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCommNumber,
		})
		_node.CommNumber = value
	}
	if value, ok := cc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldState,
		})
		_node.State = value
	}
	if value, ok := cc.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := cc.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// CommunityCreateBulk is the builder for creating many Community entities in bulk.
type CommunityCreateBulk struct {
	config
	builders []*CommunityCreate
}

// Save creates the Community entities in the database.
func (ccb *CommunityCreateBulk) Save(ctx context.Context) ([]*Community, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Community, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommunityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommunityCreateBulk) SaveX(ctx context.Context) []*Community {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommunityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommunityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
