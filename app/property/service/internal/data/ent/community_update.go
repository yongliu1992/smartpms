// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yongliu1992/smartpms/app/property/service/internal/data/ent/community"
	"github.com/yongliu1992/smartpms/app/property/service/internal/data/ent/predicate"
)

// CommunityUpdate is the builder for updating Community entities.
type CommunityUpdate struct {
	config
	hooks    []Hook
	mutation *CommunityMutation
}

// Where appends a list predicates to the CommunityUpdate builder.
func (cu *CommunityUpdate) Where(ps ...predicate.Community) *CommunityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CommunityUpdate) SetName(s string) *CommunityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetProvinceID sets the "province_id" field.
func (cu *CommunityUpdate) SetProvinceID(i int) *CommunityUpdate {
	cu.mutation.ResetProvinceID()
	cu.mutation.SetProvinceID(i)
	return cu
}

// AddProvinceID adds i to the "province_id" field.
func (cu *CommunityUpdate) AddProvinceID(i int) *CommunityUpdate {
	cu.mutation.AddProvinceID(i)
	return cu
}

// SetCityID sets the "city_id" field.
func (cu *CommunityUpdate) SetCityID(i int) *CommunityUpdate {
	cu.mutation.ResetCityID()
	cu.mutation.SetCityID(i)
	return cu
}

// AddCityID adds i to the "city_id" field.
func (cu *CommunityUpdate) AddCityID(i int) *CommunityUpdate {
	cu.mutation.AddCityID(i)
	return cu
}

// SetAreaID sets the "area_id" field.
func (cu *CommunityUpdate) SetAreaID(i int) *CommunityUpdate {
	cu.mutation.ResetAreaID()
	cu.mutation.SetAreaID(i)
	return cu
}

// AddAreaID adds i to the "area_id" field.
func (cu *CommunityUpdate) AddAreaID(i int) *CommunityUpdate {
	cu.mutation.AddAreaID(i)
	return cu
}

// SetAreaNum sets the "area_num" field.
func (cu *CommunityUpdate) SetAreaNum(i int) *CommunityUpdate {
	cu.mutation.ResetAreaNum()
	cu.mutation.SetAreaNum(i)
	return cu
}

// AddAreaNum adds i to the "area_num" field.
func (cu *CommunityUpdate) AddAreaNum(i int) *CommunityUpdate {
	cu.mutation.AddAreaNum(i)
	return cu
}

// SetAdminID sets the "admin_id" field.
func (cu *CommunityUpdate) SetAdminID(i int) *CommunityUpdate {
	cu.mutation.ResetAdminID()
	cu.mutation.SetAdminID(i)
	return cu
}

// AddAdminID adds i to the "admin_id" field.
func (cu *CommunityUpdate) AddAdminID(i int) *CommunityUpdate {
	cu.mutation.AddAdminID(i)
	return cu
}

// SetCommNumber sets the "comm_number" field.
func (cu *CommunityUpdate) SetCommNumber(i int) *CommunityUpdate {
	cu.mutation.ResetCommNumber()
	cu.mutation.SetCommNumber(i)
	return cu
}

// AddCommNumber adds i to the "comm_number" field.
func (cu *CommunityUpdate) AddCommNumber(i int) *CommunityUpdate {
	cu.mutation.AddCommNumber(i)
	return cu
}

// SetState sets the "state" field.
func (cu *CommunityUpdate) SetState(i int) *CommunityUpdate {
	cu.mutation.ResetState()
	cu.mutation.SetState(i)
	return cu
}

// AddState adds i to the "state" field.
func (cu *CommunityUpdate) AddState(i int) *CommunityUpdate {
	cu.mutation.AddState(i)
	return cu
}

// SetStartTime sets the "start_time" field.
func (cu *CommunityUpdate) SetStartTime(t time.Time) *CommunityUpdate {
	cu.mutation.SetStartTime(t)
	return cu
}

// SetEndTime sets the "end_time" field.
func (cu *CommunityUpdate) SetEndTime(t time.Time) *CommunityUpdate {
	cu.mutation.SetEndTime(t)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CommunityUpdate) SetCreatedAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommunityUpdate) SetUpdatedAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CommunityUpdate) SetDeletedAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// Mutation returns the CommunityMutation object of the builder.
func (cu *CommunityUpdate) Mutation() *CommunityMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommunityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommunityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommunityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommunityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CommunityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   community.Table,
			Columns: community.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: community.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldName,
		})
	}
	if value, ok := cu.mutation.ProvinceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldProvinceID,
		})
	}
	if value, ok := cu.mutation.AddedProvinceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldProvinceID,
		})
	}
	if value, ok := cu.mutation.CityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCityID,
		})
	}
	if value, ok := cu.mutation.AddedCityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCityID,
		})
	}
	if value, ok := cu.mutation.AreaID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaID,
		})
	}
	if value, ok := cu.mutation.AddedAreaID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaID,
		})
	}
	if value, ok := cu.mutation.AreaNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaNum,
		})
	}
	if value, ok := cu.mutation.AddedAreaNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaNum,
		})
	}
	if value, ok := cu.mutation.AdminID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAdminID,
		})
	}
	if value, ok := cu.mutation.AddedAdminID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAdminID,
		})
	}
	if value, ok := cu.mutation.CommNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCommNumber,
		})
	}
	if value, ok := cu.mutation.AddedCommNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCommNumber,
		})
	}
	if value, ok := cu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldState,
		})
	}
	if value, ok := cu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldState,
		})
	}
	if value, ok := cu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldStartTime,
		})
	}
	if value, ok := cu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldEndTime,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CommunityUpdateOne is the builder for updating a single Community entity.
type CommunityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunityMutation
}

// SetName sets the "name" field.
func (cuo *CommunityUpdateOne) SetName(s string) *CommunityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetProvinceID sets the "province_id" field.
func (cuo *CommunityUpdateOne) SetProvinceID(i int) *CommunityUpdateOne {
	cuo.mutation.ResetProvinceID()
	cuo.mutation.SetProvinceID(i)
	return cuo
}

// AddProvinceID adds i to the "province_id" field.
func (cuo *CommunityUpdateOne) AddProvinceID(i int) *CommunityUpdateOne {
	cuo.mutation.AddProvinceID(i)
	return cuo
}

// SetCityID sets the "city_id" field.
func (cuo *CommunityUpdateOne) SetCityID(i int) *CommunityUpdateOne {
	cuo.mutation.ResetCityID()
	cuo.mutation.SetCityID(i)
	return cuo
}

// AddCityID adds i to the "city_id" field.
func (cuo *CommunityUpdateOne) AddCityID(i int) *CommunityUpdateOne {
	cuo.mutation.AddCityID(i)
	return cuo
}

// SetAreaID sets the "area_id" field.
func (cuo *CommunityUpdateOne) SetAreaID(i int) *CommunityUpdateOne {
	cuo.mutation.ResetAreaID()
	cuo.mutation.SetAreaID(i)
	return cuo
}

// AddAreaID adds i to the "area_id" field.
func (cuo *CommunityUpdateOne) AddAreaID(i int) *CommunityUpdateOne {
	cuo.mutation.AddAreaID(i)
	return cuo
}

// SetAreaNum sets the "area_num" field.
func (cuo *CommunityUpdateOne) SetAreaNum(i int) *CommunityUpdateOne {
	cuo.mutation.ResetAreaNum()
	cuo.mutation.SetAreaNum(i)
	return cuo
}

// AddAreaNum adds i to the "area_num" field.
func (cuo *CommunityUpdateOne) AddAreaNum(i int) *CommunityUpdateOne {
	cuo.mutation.AddAreaNum(i)
	return cuo
}

// SetAdminID sets the "admin_id" field.
func (cuo *CommunityUpdateOne) SetAdminID(i int) *CommunityUpdateOne {
	cuo.mutation.ResetAdminID()
	cuo.mutation.SetAdminID(i)
	return cuo
}

// AddAdminID adds i to the "admin_id" field.
func (cuo *CommunityUpdateOne) AddAdminID(i int) *CommunityUpdateOne {
	cuo.mutation.AddAdminID(i)
	return cuo
}

// SetCommNumber sets the "comm_number" field.
func (cuo *CommunityUpdateOne) SetCommNumber(i int) *CommunityUpdateOne {
	cuo.mutation.ResetCommNumber()
	cuo.mutation.SetCommNumber(i)
	return cuo
}

// AddCommNumber adds i to the "comm_number" field.
func (cuo *CommunityUpdateOne) AddCommNumber(i int) *CommunityUpdateOne {
	cuo.mutation.AddCommNumber(i)
	return cuo
}

// SetState sets the "state" field.
func (cuo *CommunityUpdateOne) SetState(i int) *CommunityUpdateOne {
	cuo.mutation.ResetState()
	cuo.mutation.SetState(i)
	return cuo
}

// AddState adds i to the "state" field.
func (cuo *CommunityUpdateOne) AddState(i int) *CommunityUpdateOne {
	cuo.mutation.AddState(i)
	return cuo
}

// SetStartTime sets the "start_time" field.
func (cuo *CommunityUpdateOne) SetStartTime(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetStartTime(t)
	return cuo
}

// SetEndTime sets the "end_time" field.
func (cuo *CommunityUpdateOne) SetEndTime(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetEndTime(t)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CommunityUpdateOne) SetCreatedAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommunityUpdateOne) SetUpdatedAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CommunityUpdateOne) SetDeletedAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// Mutation returns the CommunityMutation object of the builder.
func (cuo *CommunityUpdateOne) Mutation() *CommunityMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommunityUpdateOne) Select(field string, fields ...string) *CommunityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Community entity.
func (cuo *CommunityUpdateOne) Save(ctx context.Context) (*Community, error) {
	var (
		err  error
		node *Community
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommunityUpdateOne) SaveX(ctx context.Context) *Community {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommunityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommunityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CommunityUpdateOne) sqlSave(ctx context.Context) (_node *Community, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   community.Table,
			Columns: community.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: community.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Community.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, community.FieldID)
		for _, f := range fields {
			if !community.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != community.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldName,
		})
	}
	if value, ok := cuo.mutation.ProvinceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldProvinceID,
		})
	}
	if value, ok := cuo.mutation.AddedProvinceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldProvinceID,
		})
	}
	if value, ok := cuo.mutation.CityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCityID,
		})
	}
	if value, ok := cuo.mutation.AddedCityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCityID,
		})
	}
	if value, ok := cuo.mutation.AreaID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaID,
		})
	}
	if value, ok := cuo.mutation.AddedAreaID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaID,
		})
	}
	if value, ok := cuo.mutation.AreaNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaNum,
		})
	}
	if value, ok := cuo.mutation.AddedAreaNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAreaNum,
		})
	}
	if value, ok := cuo.mutation.AdminID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAdminID,
		})
	}
	if value, ok := cuo.mutation.AddedAdminID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldAdminID,
		})
	}
	if value, ok := cuo.mutation.CommNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCommNumber,
		})
	}
	if value, ok := cuo.mutation.AddedCommNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldCommNumber,
		})
	}
	if value, ok := cuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldState,
		})
	}
	if value, ok := cuo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldState,
		})
	}
	if value, ok := cuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldStartTime,
		})
	}
	if value, ok := cuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldEndTime,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldDeletedAt,
		})
	}
	_node = &Community{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
