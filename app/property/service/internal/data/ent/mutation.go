// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/yongliu1992/smartpms/app/property/service/internal/data/ent/community"
	"github.com/yongliu1992/smartpms/app/property/service/internal/data/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCommunity = "Community"
)

// CommunityMutation represents an operation that mutates the Community nodes in the graph.
type CommunityMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	province_id    *int
	addprovince_id *int
	city_id        *int
	addcity_id     *int
	area_id        *int
	addarea_id     *int
	area_num       *int
	addarea_num    *int
	admin_id       *int
	addadmin_id    *int
	comm_number    *int
	addcomm_number *int
	state          *int
	addstate       *int
	start_time     *time.Time
	end_time       *time.Time
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Community, error)
	predicates     []predicate.Community
}

var _ ent.Mutation = (*CommunityMutation)(nil)

// communityOption allows management of the mutation configuration using functional options.
type communityOption func(*CommunityMutation)

// newCommunityMutation creates new mutation for the Community entity.
func newCommunityMutation(c config, op Op, opts ...communityOption) *CommunityMutation {
	m := &CommunityMutation{
		config:        c,
		op:            op,
		typ:           TypeCommunity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommunityID sets the ID field of the mutation.
func withCommunityID(id int) communityOption {
	return func(m *CommunityMutation) {
		var (
			err   error
			once  sync.Once
			value *Community
		)
		m.oldValue = func(ctx context.Context) (*Community, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Community.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommunity sets the old Community of the mutation.
func withCommunity(node *Community) communityOption {
	return func(m *CommunityMutation) {
		m.oldValue = func(context.Context) (*Community, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommunityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommunityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Community entities.
func (m *CommunityMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommunityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommunityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Community.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CommunityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CommunityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CommunityMutation) ResetName() {
	m.name = nil
}

// SetProvinceID sets the "province_id" field.
func (m *CommunityMutation) SetProvinceID(i int) {
	m.province_id = &i
	m.addprovince_id = nil
}

// ProvinceID returns the value of the "province_id" field in the mutation.
func (m *CommunityMutation) ProvinceID() (r int, exists bool) {
	v := m.province_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProvinceID returns the old "province_id" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldProvinceID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvinceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvinceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvinceID: %w", err)
	}
	return oldValue.ProvinceID, nil
}

// AddProvinceID adds i to the "province_id" field.
func (m *CommunityMutation) AddProvinceID(i int) {
	if m.addprovince_id != nil {
		*m.addprovince_id += i
	} else {
		m.addprovince_id = &i
	}
}

// AddedProvinceID returns the value that was added to the "province_id" field in this mutation.
func (m *CommunityMutation) AddedProvinceID() (r int, exists bool) {
	v := m.addprovince_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProvinceID resets all changes to the "province_id" field.
func (m *CommunityMutation) ResetProvinceID() {
	m.province_id = nil
	m.addprovince_id = nil
}

// SetCityID sets the "city_id" field.
func (m *CommunityMutation) SetCityID(i int) {
	m.city_id = &i
	m.addcity_id = nil
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *CommunityMutation) CityID() (r int, exists bool) {
	v := m.city_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldCityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// AddCityID adds i to the "city_id" field.
func (m *CommunityMutation) AddCityID(i int) {
	if m.addcity_id != nil {
		*m.addcity_id += i
	} else {
		m.addcity_id = &i
	}
}

// AddedCityID returns the value that was added to the "city_id" field in this mutation.
func (m *CommunityMutation) AddedCityID() (r int, exists bool) {
	v := m.addcity_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCityID resets all changes to the "city_id" field.
func (m *CommunityMutation) ResetCityID() {
	m.city_id = nil
	m.addcity_id = nil
}

// SetAreaID sets the "area_id" field.
func (m *CommunityMutation) SetAreaID(i int) {
	m.area_id = &i
	m.addarea_id = nil
}

// AreaID returns the value of the "area_id" field in the mutation.
func (m *CommunityMutation) AreaID() (r int, exists bool) {
	v := m.area_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAreaID returns the old "area_id" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldAreaID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAreaID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAreaID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAreaID: %w", err)
	}
	return oldValue.AreaID, nil
}

// AddAreaID adds i to the "area_id" field.
func (m *CommunityMutation) AddAreaID(i int) {
	if m.addarea_id != nil {
		*m.addarea_id += i
	} else {
		m.addarea_id = &i
	}
}

// AddedAreaID returns the value that was added to the "area_id" field in this mutation.
func (m *CommunityMutation) AddedAreaID() (r int, exists bool) {
	v := m.addarea_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAreaID resets all changes to the "area_id" field.
func (m *CommunityMutation) ResetAreaID() {
	m.area_id = nil
	m.addarea_id = nil
}

// SetAreaNum sets the "area_num" field.
func (m *CommunityMutation) SetAreaNum(i int) {
	m.area_num = &i
	m.addarea_num = nil
}

// AreaNum returns the value of the "area_num" field in the mutation.
func (m *CommunityMutation) AreaNum() (r int, exists bool) {
	v := m.area_num
	if v == nil {
		return
	}
	return *v, true
}

// OldAreaNum returns the old "area_num" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldAreaNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAreaNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAreaNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAreaNum: %w", err)
	}
	return oldValue.AreaNum, nil
}

// AddAreaNum adds i to the "area_num" field.
func (m *CommunityMutation) AddAreaNum(i int) {
	if m.addarea_num != nil {
		*m.addarea_num += i
	} else {
		m.addarea_num = &i
	}
}

// AddedAreaNum returns the value that was added to the "area_num" field in this mutation.
func (m *CommunityMutation) AddedAreaNum() (r int, exists bool) {
	v := m.addarea_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetAreaNum resets all changes to the "area_num" field.
func (m *CommunityMutation) ResetAreaNum() {
	m.area_num = nil
	m.addarea_num = nil
}

// SetAdminID sets the "admin_id" field.
func (m *CommunityMutation) SetAdminID(i int) {
	m.admin_id = &i
	m.addadmin_id = nil
}

// AdminID returns the value of the "admin_id" field in the mutation.
func (m *CommunityMutation) AdminID() (r int, exists bool) {
	v := m.admin_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAdminID returns the old "admin_id" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldAdminID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdminID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdminID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdminID: %w", err)
	}
	return oldValue.AdminID, nil
}

// AddAdminID adds i to the "admin_id" field.
func (m *CommunityMutation) AddAdminID(i int) {
	if m.addadmin_id != nil {
		*m.addadmin_id += i
	} else {
		m.addadmin_id = &i
	}
}

// AddedAdminID returns the value that was added to the "admin_id" field in this mutation.
func (m *CommunityMutation) AddedAdminID() (r int, exists bool) {
	v := m.addadmin_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAdminID resets all changes to the "admin_id" field.
func (m *CommunityMutation) ResetAdminID() {
	m.admin_id = nil
	m.addadmin_id = nil
}

// SetCommNumber sets the "comm_number" field.
func (m *CommunityMutation) SetCommNumber(i int) {
	m.comm_number = &i
	m.addcomm_number = nil
}

// CommNumber returns the value of the "comm_number" field in the mutation.
func (m *CommunityMutation) CommNumber() (r int, exists bool) {
	v := m.comm_number
	if v == nil {
		return
	}
	return *v, true
}

// OldCommNumber returns the old "comm_number" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldCommNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommNumber: %w", err)
	}
	return oldValue.CommNumber, nil
}

// AddCommNumber adds i to the "comm_number" field.
func (m *CommunityMutation) AddCommNumber(i int) {
	if m.addcomm_number != nil {
		*m.addcomm_number += i
	} else {
		m.addcomm_number = &i
	}
}

// AddedCommNumber returns the value that was added to the "comm_number" field in this mutation.
func (m *CommunityMutation) AddedCommNumber() (r int, exists bool) {
	v := m.addcomm_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetCommNumber resets all changes to the "comm_number" field.
func (m *CommunityMutation) ResetCommNumber() {
	m.comm_number = nil
	m.addcomm_number = nil
}

// SetState sets the "state" field.
func (m *CommunityMutation) SetState(i int) {
	m.state = &i
	m.addstate = nil
}

// State returns the value of the "state" field in the mutation.
func (m *CommunityMutation) State() (r int, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldState(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// AddState adds i to the "state" field.
func (m *CommunityMutation) AddState(i int) {
	if m.addstate != nil {
		*m.addstate += i
	} else {
		m.addstate = &i
	}
}

// AddedState returns the value that was added to the "state" field in this mutation.
func (m *CommunityMutation) AddedState() (r int, exists bool) {
	v := m.addstate
	if v == nil {
		return
	}
	return *v, true
}

// ResetState resets all changes to the "state" field.
func (m *CommunityMutation) ResetState() {
	m.state = nil
	m.addstate = nil
}

// SetStartTime sets the "start_time" field.
func (m *CommunityMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *CommunityMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *CommunityMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *CommunityMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *CommunityMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *CommunityMutation) ResetEndTime() {
	m.end_time = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommunityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommunityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommunityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CommunityMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CommunityMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CommunityMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CommunityMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CommunityMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CommunityMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// Where appends a list predicates to the CommunityMutation builder.
func (m *CommunityMutation) Where(ps ...predicate.Community) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CommunityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Community).
func (m *CommunityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommunityMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, community.FieldName)
	}
	if m.province_id != nil {
		fields = append(fields, community.FieldProvinceID)
	}
	if m.city_id != nil {
		fields = append(fields, community.FieldCityID)
	}
	if m.area_id != nil {
		fields = append(fields, community.FieldAreaID)
	}
	if m.area_num != nil {
		fields = append(fields, community.FieldAreaNum)
	}
	if m.admin_id != nil {
		fields = append(fields, community.FieldAdminID)
	}
	if m.comm_number != nil {
		fields = append(fields, community.FieldCommNumber)
	}
	if m.state != nil {
		fields = append(fields, community.FieldState)
	}
	if m.start_time != nil {
		fields = append(fields, community.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, community.FieldEndTime)
	}
	if m.created_at != nil {
		fields = append(fields, community.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, community.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, community.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommunityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case community.FieldName:
		return m.Name()
	case community.FieldProvinceID:
		return m.ProvinceID()
	case community.FieldCityID:
		return m.CityID()
	case community.FieldAreaID:
		return m.AreaID()
	case community.FieldAreaNum:
		return m.AreaNum()
	case community.FieldAdminID:
		return m.AdminID()
	case community.FieldCommNumber:
		return m.CommNumber()
	case community.FieldState:
		return m.State()
	case community.FieldStartTime:
		return m.StartTime()
	case community.FieldEndTime:
		return m.EndTime()
	case community.FieldCreatedAt:
		return m.CreatedAt()
	case community.FieldUpdatedAt:
		return m.UpdatedAt()
	case community.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommunityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case community.FieldName:
		return m.OldName(ctx)
	case community.FieldProvinceID:
		return m.OldProvinceID(ctx)
	case community.FieldCityID:
		return m.OldCityID(ctx)
	case community.FieldAreaID:
		return m.OldAreaID(ctx)
	case community.FieldAreaNum:
		return m.OldAreaNum(ctx)
	case community.FieldAdminID:
		return m.OldAdminID(ctx)
	case community.FieldCommNumber:
		return m.OldCommNumber(ctx)
	case community.FieldState:
		return m.OldState(ctx)
	case community.FieldStartTime:
		return m.OldStartTime(ctx)
	case community.FieldEndTime:
		return m.OldEndTime(ctx)
	case community.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case community.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case community.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Community field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommunityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case community.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case community.FieldProvinceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvinceID(v)
		return nil
	case community.FieldCityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case community.FieldAreaID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAreaID(v)
		return nil
	case community.FieldAreaNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAreaNum(v)
		return nil
	case community.FieldAdminID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdminID(v)
		return nil
	case community.FieldCommNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommNumber(v)
		return nil
	case community.FieldState:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case community.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case community.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case community.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case community.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case community.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Community field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommunityMutation) AddedFields() []string {
	var fields []string
	if m.addprovince_id != nil {
		fields = append(fields, community.FieldProvinceID)
	}
	if m.addcity_id != nil {
		fields = append(fields, community.FieldCityID)
	}
	if m.addarea_id != nil {
		fields = append(fields, community.FieldAreaID)
	}
	if m.addarea_num != nil {
		fields = append(fields, community.FieldAreaNum)
	}
	if m.addadmin_id != nil {
		fields = append(fields, community.FieldAdminID)
	}
	if m.addcomm_number != nil {
		fields = append(fields, community.FieldCommNumber)
	}
	if m.addstate != nil {
		fields = append(fields, community.FieldState)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommunityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case community.FieldProvinceID:
		return m.AddedProvinceID()
	case community.FieldCityID:
		return m.AddedCityID()
	case community.FieldAreaID:
		return m.AddedAreaID()
	case community.FieldAreaNum:
		return m.AddedAreaNum()
	case community.FieldAdminID:
		return m.AddedAdminID()
	case community.FieldCommNumber:
		return m.AddedCommNumber()
	case community.FieldState:
		return m.AddedState()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommunityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case community.FieldProvinceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProvinceID(v)
		return nil
	case community.FieldCityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCityID(v)
		return nil
	case community.FieldAreaID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAreaID(v)
		return nil
	case community.FieldAreaNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAreaNum(v)
		return nil
	case community.FieldAdminID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAdminID(v)
		return nil
	case community.FieldCommNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCommNumber(v)
		return nil
	case community.FieldState:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddState(v)
		return nil
	}
	return fmt.Errorf("unknown Community numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommunityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommunityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommunityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Community nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommunityMutation) ResetField(name string) error {
	switch name {
	case community.FieldName:
		m.ResetName()
		return nil
	case community.FieldProvinceID:
		m.ResetProvinceID()
		return nil
	case community.FieldCityID:
		m.ResetCityID()
		return nil
	case community.FieldAreaID:
		m.ResetAreaID()
		return nil
	case community.FieldAreaNum:
		m.ResetAreaNum()
		return nil
	case community.FieldAdminID:
		m.ResetAdminID()
		return nil
	case community.FieldCommNumber:
		m.ResetCommNumber()
		return nil
	case community.FieldState:
		m.ResetState()
		return nil
	case community.FieldStartTime:
		m.ResetStartTime()
		return nil
	case community.FieldEndTime:
		m.ResetEndTime()
		return nil
	case community.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case community.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case community.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Community field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommunityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommunityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommunityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommunityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommunityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommunityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommunityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Community unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommunityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Community edge %s", name)
}
