// Code generated by entc, DO NOT EDIT.

package shop

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yongliu1992/smartpms/app/property/service/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FloorID applies equality check predicate on the "floor_id" field. It's identical to FloorIDEQ.
func FloorID(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloorID), v))
	})
}

// RoomNum applies equality check predicate on the "room_num" field. It's identical to RoomNumEQ.
func RoomNum(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomNum), v))
	})
}

// Layer applies equality check predicate on the "layer" field. It's identical to LayerEQ.
func Layer(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLayer), v))
	})
}

// BuiltUpArea applies equality check predicate on the "built_up_area" field. It's identical to BuiltUpAreaEQ.
func BuiltUpArea(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuiltUpArea), v))
	})
}

// CommunityID applies equality check predicate on the "community_id" field. It's identical to CommunityIDEQ.
func CommunityID(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommunityID), v))
	})
}

// FeeRate applies equality check predicate on the "fee_rate" field. It's identical to FeeRateEQ.
func FeeRate(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeRate), v))
	})
}

// RoomArea applies equality check predicate on the "room_area" field. It's identical to RoomAreaEQ.
func RoomArea(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomArea), v))
	})
}

// Rent applies equality check predicate on the "rent" field. It's identical to RentEQ.
func Rent(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRent), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// FloorIDEQ applies the EQ predicate on the "floor_id" field.
func FloorIDEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloorID), v))
	})
}

// FloorIDNEQ applies the NEQ predicate on the "floor_id" field.
func FloorIDNEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFloorID), v))
	})
}

// FloorIDIn applies the In predicate on the "floor_id" field.
func FloorIDIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFloorID), v...))
	})
}

// FloorIDNotIn applies the NotIn predicate on the "floor_id" field.
func FloorIDNotIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFloorID), v...))
	})
}

// FloorIDGT applies the GT predicate on the "floor_id" field.
func FloorIDGT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFloorID), v))
	})
}

// FloorIDGTE applies the GTE predicate on the "floor_id" field.
func FloorIDGTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFloorID), v))
	})
}

// FloorIDLT applies the LT predicate on the "floor_id" field.
func FloorIDLT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFloorID), v))
	})
}

// FloorIDLTE applies the LTE predicate on the "floor_id" field.
func FloorIDLTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFloorID), v))
	})
}

// FloorIDContains applies the Contains predicate on the "floor_id" field.
func FloorIDContains(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFloorID), v))
	})
}

// FloorIDHasPrefix applies the HasPrefix predicate on the "floor_id" field.
func FloorIDHasPrefix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFloorID), v))
	})
}

// FloorIDHasSuffix applies the HasSuffix predicate on the "floor_id" field.
func FloorIDHasSuffix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFloorID), v))
	})
}

// FloorIDEqualFold applies the EqualFold predicate on the "floor_id" field.
func FloorIDEqualFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFloorID), v))
	})
}

// FloorIDContainsFold applies the ContainsFold predicate on the "floor_id" field.
func FloorIDContainsFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFloorID), v))
	})
}

// RoomNumEQ applies the EQ predicate on the "room_num" field.
func RoomNumEQ(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomNum), v))
	})
}

// RoomNumNEQ applies the NEQ predicate on the "room_num" field.
func RoomNumNEQ(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomNum), v))
	})
}

// RoomNumIn applies the In predicate on the "room_num" field.
func RoomNumIn(vs ...int) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomNum), v...))
	})
}

// RoomNumNotIn applies the NotIn predicate on the "room_num" field.
func RoomNumNotIn(vs ...int) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomNum), v...))
	})
}

// RoomNumGT applies the GT predicate on the "room_num" field.
func RoomNumGT(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomNum), v))
	})
}

// RoomNumGTE applies the GTE predicate on the "room_num" field.
func RoomNumGTE(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomNum), v))
	})
}

// RoomNumLT applies the LT predicate on the "room_num" field.
func RoomNumLT(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomNum), v))
	})
}

// RoomNumLTE applies the LTE predicate on the "room_num" field.
func RoomNumLTE(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomNum), v))
	})
}

// LayerEQ applies the EQ predicate on the "layer" field.
func LayerEQ(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLayer), v))
	})
}

// LayerNEQ applies the NEQ predicate on the "layer" field.
func LayerNEQ(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLayer), v))
	})
}

// LayerIn applies the In predicate on the "layer" field.
func LayerIn(vs ...int) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLayer), v...))
	})
}

// LayerNotIn applies the NotIn predicate on the "layer" field.
func LayerNotIn(vs ...int) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLayer), v...))
	})
}

// LayerGT applies the GT predicate on the "layer" field.
func LayerGT(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLayer), v))
	})
}

// LayerGTE applies the GTE predicate on the "layer" field.
func LayerGTE(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLayer), v))
	})
}

// LayerLT applies the LT predicate on the "layer" field.
func LayerLT(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLayer), v))
	})
}

// LayerLTE applies the LTE predicate on the "layer" field.
func LayerLTE(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLayer), v))
	})
}

// BuiltUpAreaEQ applies the EQ predicate on the "built_up_area" field.
func BuiltUpAreaEQ(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuiltUpArea), v))
	})
}

// BuiltUpAreaNEQ applies the NEQ predicate on the "built_up_area" field.
func BuiltUpAreaNEQ(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBuiltUpArea), v))
	})
}

// BuiltUpAreaIn applies the In predicate on the "built_up_area" field.
func BuiltUpAreaIn(vs ...float32) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBuiltUpArea), v...))
	})
}

// BuiltUpAreaNotIn applies the NotIn predicate on the "built_up_area" field.
func BuiltUpAreaNotIn(vs ...float32) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBuiltUpArea), v...))
	})
}

// BuiltUpAreaGT applies the GT predicate on the "built_up_area" field.
func BuiltUpAreaGT(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBuiltUpArea), v))
	})
}

// BuiltUpAreaGTE applies the GTE predicate on the "built_up_area" field.
func BuiltUpAreaGTE(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBuiltUpArea), v))
	})
}

// BuiltUpAreaLT applies the LT predicate on the "built_up_area" field.
func BuiltUpAreaLT(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBuiltUpArea), v))
	})
}

// BuiltUpAreaLTE applies the LTE predicate on the "built_up_area" field.
func BuiltUpAreaLTE(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBuiltUpArea), v))
	})
}

// CommunityIDEQ applies the EQ predicate on the "community_id" field.
func CommunityIDEQ(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommunityID), v))
	})
}

// CommunityIDNEQ applies the NEQ predicate on the "community_id" field.
func CommunityIDNEQ(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommunityID), v))
	})
}

// CommunityIDIn applies the In predicate on the "community_id" field.
func CommunityIDIn(vs ...int) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCommunityID), v...))
	})
}

// CommunityIDNotIn applies the NotIn predicate on the "community_id" field.
func CommunityIDNotIn(vs ...int) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCommunityID), v...))
	})
}

// CommunityIDGT applies the GT predicate on the "community_id" field.
func CommunityIDGT(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommunityID), v))
	})
}

// CommunityIDGTE applies the GTE predicate on the "community_id" field.
func CommunityIDGTE(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommunityID), v))
	})
}

// CommunityIDLT applies the LT predicate on the "community_id" field.
func CommunityIDLT(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommunityID), v))
	})
}

// CommunityIDLTE applies the LTE predicate on the "community_id" field.
func CommunityIDLTE(v int) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommunityID), v))
	})
}

// FeeRateEQ applies the EQ predicate on the "fee_rate" field.
func FeeRateEQ(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeRate), v))
	})
}

// FeeRateNEQ applies the NEQ predicate on the "fee_rate" field.
func FeeRateNEQ(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeeRate), v))
	})
}

// FeeRateIn applies the In predicate on the "fee_rate" field.
func FeeRateIn(vs ...float32) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeeRate), v...))
	})
}

// FeeRateNotIn applies the NotIn predicate on the "fee_rate" field.
func FeeRateNotIn(vs ...float32) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeeRate), v...))
	})
}

// FeeRateGT applies the GT predicate on the "fee_rate" field.
func FeeRateGT(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeeRate), v))
	})
}

// FeeRateGTE applies the GTE predicate on the "fee_rate" field.
func FeeRateGTE(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeeRate), v))
	})
}

// FeeRateLT applies the LT predicate on the "fee_rate" field.
func FeeRateLT(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeeRate), v))
	})
}

// FeeRateLTE applies the LTE predicate on the "fee_rate" field.
func FeeRateLTE(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeeRate), v))
	})
}

// RoomAreaEQ applies the EQ predicate on the "room_area" field.
func RoomAreaEQ(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomArea), v))
	})
}

// RoomAreaNEQ applies the NEQ predicate on the "room_area" field.
func RoomAreaNEQ(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomArea), v))
	})
}

// RoomAreaIn applies the In predicate on the "room_area" field.
func RoomAreaIn(vs ...float32) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomArea), v...))
	})
}

// RoomAreaNotIn applies the NotIn predicate on the "room_area" field.
func RoomAreaNotIn(vs ...float32) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomArea), v...))
	})
}

// RoomAreaGT applies the GT predicate on the "room_area" field.
func RoomAreaGT(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomArea), v))
	})
}

// RoomAreaGTE applies the GTE predicate on the "room_area" field.
func RoomAreaGTE(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomArea), v))
	})
}

// RoomAreaLT applies the LT predicate on the "room_area" field.
func RoomAreaLT(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomArea), v))
	})
}

// RoomAreaLTE applies the LTE predicate on the "room_area" field.
func RoomAreaLTE(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomArea), v))
	})
}

// RentEQ applies the EQ predicate on the "rent" field.
func RentEQ(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRent), v))
	})
}

// RentNEQ applies the NEQ predicate on the "rent" field.
func RentNEQ(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRent), v))
	})
}

// RentIn applies the In predicate on the "rent" field.
func RentIn(vs ...float32) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRent), v...))
	})
}

// RentNotIn applies the NotIn predicate on the "rent" field.
func RentNotIn(vs ...float32) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRent), v...))
	})
}

// RentGT applies the GT predicate on the "rent" field.
func RentGT(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRent), v))
	})
}

// RentGTE applies the GTE predicate on the "rent" field.
func RentGTE(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRent), v))
	})
}

// RentLT applies the LT predicate on the "rent" field.
func RentLT(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRent), v))
	})
}

// RentLTE applies the LTE predicate on the "rent" field.
func RentLTE(v float32) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRent), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		p(s.Not())
	})
}
